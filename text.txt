window.onload = function() {
    var canvasWidth = 900;
    var canvasHeight = 600;
    var blockSize = 30;
    var ctx;
    var delay = 200;
    var snakee;

    var food;

    init();

    function init() {
        var canvas = document.createElement("canvas");
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;
        canvas.style.border = "1px solid black"; // Ajout de la couleur de la bordure
        document.body.appendChild(canvas);
        ctx = canvas.getContext('2d');
        snakee = new Snake([[6,4],[5,4],[4,4]],"right");
        createFood();
        refreshCanvas();
    }

    function refreshCanvas() {
        ctx.clearRect(0,0,canvasWidth,canvasHeight);
        snakee.draw();
        drawFood();
        snakee.advance();

        if (snakee.checkCollision()) {
            // Le serpent a heurté un mur ou s'est mordu la queue
            gameOver();
        } else {
            if (snakee.isEatingFood(food)) {
                // Le serpent a mangé la nourriture
                snakee.grow();
                createFood();
            }
            setTimeout(refreshCanvas,delay); 
        }
    }

    function drawBlock(ctx, position) {
        var x = position[0] * blockSize;
        var y = position[1] * blockSize;
        ctx.fillRect(x, y, blockSize, blockSize);
    }

    function Snake(body, direction) {
        this.body = body;
        this.direction = direction;
        this.ateFood = false;

        this.draw = function() {
            ctx.save();
            ctx.fillStyle = "#ff0000";
            for(var i = 0; i < this.body.length; i++) {
                drawBlock(ctx, this.body[i]);
            }
            ctx.restore();
        };
        
        this.advance = function () {
            var nextPosition = this.body[0].slice();
            switch(this.direction) {
                case "left":
                    nextPosition[0] -= 1;
                    break;
                case "right":
                    nextPosition[0] += 1;
                    break;
                case "down":
                    nextPosition[1] += 1;
                    break;
                case "up":
                    nextPosition[1] -= 1;
                    break;
                default:
                    throw("invalid direction");
            }
            this.body.unshift(nextPosition);
            if (!this.ateFood) {
                this.body.pop();
            } else {
                this.ateFood = false;
            }
        };

        this.setDirection = function(newDirection) {
            var allowedDirection;
            switch(this.direction) {
                case "left":
                case "right":
                    allowedDirection = ["up","down"];
                    break;
                case "down":
                case "up":
                    allowedDirection = ["left","right"]; 
                    break;
                default:
                    throw("invalid direction");
            }
            if(allowedDirection.indexOf(newDirection) > -1) {
                this.direction = newDirection;
            }
        };

        this.checkCollision = function() {
            var wallCollision = false;
            var selfCollision = false;

            var head = this.body[0];
            var rest = this.body.slice(1);
            var snakeX = head[0];
            var snakeY = head[1];
            var minX = 0;
            var minY = 0;
            var maxX = canvasWidth / blockSize;
            var maxY = canvasHeight / blockSize;
            var isNotBetweenHorizontalWalls = snakeX < minX || snakeX >= maxX;
            var isNotBetweenVerticalWalls = snakeY < minY || snakeY >= maxY;

            if (isNotBetweenHorizontalWalls || isNotBetweenVerticalWalls) {
                wallCollision = true;
            }

            for (var i = 0; i < rest.length; i++) {
                if (snakeX === rest[i][0] && snakeY === rest[i][1]) {
                    selfCollision = true;
                }
            }

            return wallCollision || selfCollision;
        };

        this.isEatingFood = function(food) {
            var head = this.body[0];
            if (head[0] === food[0] && head[1] === food[1]) {
                this.ateFood = true;
                return true;
            } else {
                return false;
            }
        };

        this.grow = function() {
            var tail = this.body[this.body.length - 1];
            this.body.push(tail);
        };
    }
    
    document.onkeydown = function handleKeyDown(e) {
        var key = e.keyCode;
        var newDirection;
        switch(key) {
            case 37:
                newDirection = "left";
                break;
            case 38:
                newDirection = "up";
                break;
            case 39:
                newDirection = "right";
                break;
            case 40:
                newDirection = "down";
                break;
            default:
                return;
        }
        snakee.setDirection(newDirection);
    };

    function createFood() {
        var foodX = Math.floor(Math.random() * (canvasWidth / blockSize));
        var foodY = Math.floor(Math.random() * (canvasHeight / blockSize));
        food = [foodX, foodY];
    }

    function drawFood() {
        ctx.fillStyle = "#00ff00";
        drawBlock(ctx, food);
    }

    function gameOver() {
        ctx.save();
        ctx.font = "bold 70px sans-serif";
        ctx.fillStyle = "black";
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        ctx.strokeStyle = "white";
        ctx.lineWidth = 5;
        var centerX = canvasWidth / 2;
        var centerY = canvasHeight / 2;
        ctx.strokeText("Game Over", centerX, centerY - 180);
        ctx.fillText("Game Over", centerX, centerY - 180);
        ctx.font = "bold 30px sans-serif";
        ctx.strokeText("Press F5 to restart", centerX, centerY - 120);
        ctx.fillText("Press F5 to restart", centerX, centerY - 120);
        ctx.restore();
    }
};
